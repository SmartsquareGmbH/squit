buildscript {
    apply from: '../gradle/versions.gradle'

    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:$gradlePublishVersion"

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"

        classpath "gradle.plugin.org.jlleitschuh.gradle:ktlint-gradle:$ktlintPluginVersion"
        classpath "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektVersion"
        classpath "gradle.plugin.pl.droidsonroids.gradle.jacoco:jacoco-testkit-plugin:$jacocoTestkitVersion"
    }
}

apply plugin: 'com.gradle.plugin-publish'

apply plugin: 'java-gradle-plugin'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'

apply plugin: 'io.gitlab.arturbosch.detekt'
apply plugin: 'org.jlleitschuh.gradle.ktlint'
apply plugin: 'pl.droidsonroids.jacoco.testkit'

dependencies {
    implementation project(':squit-library')

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-html-jvm:$kotlinHtmlVersion"

    implementation "org.dom4j:dom4j:$dom4jVersion"
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "org.xmlunit:xmlunit-core:$xmlUnitVersion"
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.typesafe:config:$typesafeConfigVersion"
    implementation("com.github.wumpz:diffutils:$diffUtilsVersion") {
        exclude group: 'org.eclipse.jgit', module: '*'
    }

    implementation "org.webjars:bootstrap:$bootstrapVersion"
    implementation "org.webjars:font-awesome:$fontAwesomeVersion"
    implementation "org.webjars.bower:awesome-bootstrap-checkbox:$awesomeBootstrapCheckboxVersion"
    implementation("org.webjars.npm:diff2html:$diff2htmlVersion") {
        exclude group: 'org.webjars.npm', module: '*'
    }

    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testImplementation "org.jetbrains.spek:spek-api:$spekVersion"
    testImplementation "org.jetbrains.spek:spek-subject-extension:$spekVersion"
    testImplementation "org.junit.platform:junit-platform-runner:$junitPlatformVersion"
    testImplementation "org.amshove.kluent:kluent:$kluentVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    testImplementation "com.h2database:h2:$h2Version"

    testRuntime "org.jetbrains.spek:spek-junit-platform-engine:$spekVersion"
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokka) {
    from javadoc.destinationDir
}

test {
    useJUnitPlatform()
}

jacoco {
    setToolVersion(jacocoVersion)
}

ktlint {
    version = ktlintVersion
    reporters = ["CHECKSTYLE"]
}

detekt {
    version = detektVersion

    profile("main") {
        input = "$projectDir/src/main/kotlin"
        config = "${rootProject.projectDir}/config/detekt/detekt.yml"
        output = "$buildDir/reports/detekt"
    }
}

dokka {
    jdkVersion = 8
    outputDirectory = javadoc.destinationDir

    externalDocumentationLink {
        url = new URL("https://dom4j.github.io/javadoc/$dom4jVersion/")
    }
}

pluginBundle {
    website = 'https://github.com/SmartsquareGmbH/squit'
    vcsUrl = 'https://github.com/SmartsquareGmbH/squit'
    description = 'Gradle plugin for simple testing of json/xml/soap/etc. apis.'
    tags = ['testing', 'soap', 'xml', 'automation']

    plugins {
        squit {
            id = 'de.smartsquare.squit'
            displayName = 'Squit'
        }
    }
}

gradlePlugin {
    plugins {
        squit {
            id = "de.smartsquare.squit"
            implementationClass = "de.smartsquare.squit.SquitPlugin"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId 'squit-plugin'

            from components.java

            artifact sourceJar {
                classifier 'sources'
            }

            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
}

gradle.projectsEvaluated {
    check.dependsOn detektCheck

    test { finalizedBy jacocoTestReport }
}
