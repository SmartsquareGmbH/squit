import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

buildscript {
    apply from: "./gradle/versions.gradle"

    repositories {
        gradlePluginPortal()
        jcenter()
    }

    dependencies {
        classpath "com.github.ben-manes:gradle-versions-plugin:$gradleVersionsVersion"
        classpath "com.gradle.publish:plugin-publish-plugin:$gradlePublishVersion"

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"

        classpath "org.jlleitschuh.gradle:ktlint-gradle:$ktlintPluginVersion"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektVersion"
        classpath "gradle.plugin.pl.droidsonroids.gradle.jacoco:jacoco-testkit-plugin:$jacocoTestkitVersion"
    }
}

apply plugin: "com.github.ben-manes.versions"

apply plugin: "com.gradle.plugin-publish"

apply plugin: "java-gradle-plugin"
apply plugin: "java-library"
apply plugin: "maven-publish"
apply plugin: "jacoco"

apply plugin: "kotlin"
apply plugin: "org.jetbrains.dokka"

apply plugin: "io.gitlab.arturbosch.detekt"
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: "pl.droidsonroids.jacoco.testkit"

group = "de.smartsquare"
version = squitVersion

sourceCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-html-jvm:$kotlinHtmlVersion"

    api "org.dom4j:dom4j:$dom4jVersion"
    api "com.google.code.gson:gson:$gsonVersion"
    api "com.typesafe:config:$typesafeConfigVersion"

    implementation "jaxen:jaxen:$jaxenVersion"
    implementation "org.xmlunit:xmlunit-core:$xmlUnitVersion"
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "se.sawano.java:alphanumeric-comparator:$alphanumericComparatorVersion"
    implementation("com.github.wumpz:diffutils:$diffUtilsVersion") {
        exclude group: "org.eclipse.jgit", module: "*"
    }

    implementation "org.webjars.npm:jquery:$jqueryVersion"
    implementation "org.webjars.npm:bootstrap:$bootstrapVersion"
    implementation "org.webjars.npm:popper.js:$popperVersion"
    implementation "org.webjars:font-awesome:$fontAwesomeVersion"
    implementation "org.webjars.npm:marked:$markedVersion"
    implementation("org.webjars.npm:diff2html:$diff2htmlVersion") {
        exclude group: "org.webjars.npm", module: "*"
    }

    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testImplementation "org.jetbrains.spek:spek-api:$spekVersion"
    testImplementation "org.jetbrains.spek:spek-subject-extension:$spekVersion"
    testImplementation "org.junit.platform:junit-platform-runner:$junitPlatformVersion"
    testImplementation "org.amshove.kluent:kluent:$kluentVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    testImplementation "com.h2database:h2:$h2Version"
    testImplementation "io.mockk:mockk:$mockkVersion"
    
    testRuntime "org.jetbrains.spek:spek-junit-platform-engine:$spekVersion"
}

tasks.withType(KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokka) {
    from javadoc.destinationDir
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = jacocoVersion
}

ktlint {
    reporters = [ReporterType.CHECKSTYLE]
}

detekt {
    toolVersion = detektVersion

    config = files("${rootProject.projectDir}/config/detekt/detekt.yml")
    input = files("$projectDir/src/main/kotlin")

    reports {
        xml.destination = file("$buildDir/reports/detekt/detekt.xml")
        html.destination = file("$buildDir/reports/detekt/detekt.html")
    }
}

dokka {
    jdkVersion = 8
    outputDirectory = javadoc.destinationDir

    externalDocumentationLink { url = new URL("https://dom4j.github.io/javadoc/$dom4jVersion/") }
    externalDocumentationLink { url = new URL("https://lightbend.github.io/config/latest/api/index.html") }

    externalDocumentationLink {
        url = new URL("https://www.javadoc.io/doc/com.google.code.gson/gson/$gsonVersion")
        packageListUrl = new URL("https://raw.githubusercontent.com/google/gson/master/gson/docs/javadocs/package-list")
    }
}

pluginBundle {
    website = "https://github.com/SmartsquareGmbH/squit"
    vcsUrl = "https://github.com/SmartsquareGmbH/squit"
    description = "Gradle plugin for simple testing of JSON/XML/SOAP/etc APIs."
    tags = ["testing", "json", "xml", "soap", "automation"]

    plugins {
        squit {
            id = "de.smartsquare.squit"
            displayName = "Squit"
        }
    }
}

gradlePlugin {
    plugins {
        squit {
            id = "de.smartsquare.squit"
            implementationClass = "de.smartsquare.squit.SquitPlugin"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId "squit"

            from components.java

            artifact sourceJar {
                classifier "sources"
            }

            artifact javadocJar {
                classifier "javadoc"
            }
        }
    }
}

wrapper {
    gradleVersion = project.ext.gradleVersion
}

gradle.projectsEvaluated {
    test { finalizedBy jacocoTestReport }
}
