import org.gradle.api.internal.file.FileOperations
import org.gradle.internal.jacoco.JacocoAgentJar
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

buildscript {
    apply from: "./gradle/versions.gradle"

    repositories {
        gradlePluginPortal()
        jcenter()
    }
}

plugins {
    id "com.gradle.plugin-publish" version "$gradlePublishVersion"

    id 'org.jetbrains.kotlin.jvm' version "$kotlinVersion"
    id "org.jetbrains.dokka" version "$dokkaVersion"

    id "io.gitlab.arturbosch.detekt" version "$detektVersion"
    id "org.jlleitschuh.gradle.ktlint" version "$ktlintPluginVersion"
    id "com.github.ben-manes.versions" version "$gradleVersionsVersion"

    id "java-gradle-plugin"
    id "java-library"
    id "maven-publish"
    id "jacoco"
}

group = "de.smartsquare"
version = squitVersion

sourceCompatibility = 1.8

repositories {
    jcenter()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-html-jvm:$kotlinHtmlVersion"

    api "org.dom4j:dom4j:$dom4jVersion"
    api "com.google.code.gson:gson:$gsonVersion"
    api "com.typesafe:config:$typesafeConfigVersion"

    implementation "jaxen:jaxen:$jaxenVersion"
    implementation "org.apache.santuario:xmlsec:$xmlSecVersion"
    implementation "org.xmlunit:xmlunit-core:$xmlUnitVersion"
    implementation "net.javacrumbs.json-unit:json-unit:$jsonUnitVersion"
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "se.sawano.java:alphanumeric-comparator:$alphanumericComparatorVersion"
    implementation("com.github.wumpz:diffutils:$diffUtilsVersion") {
        exclude group: "org.eclipse.jgit", module: "*"
    }

    implementation "org.webjars.npm:jquery:$jqueryVersion"
    implementation "org.webjars.npm:bootstrap:$bootstrapVersion"
    implementation "org.webjars.npm:popper.js:$popperVersion"
    implementation "org.webjars:font-awesome:$fontAwesomeVersion"
    implementation "org.webjars.npm:marked:$markedVersion"
    implementation("org.webjars.npm:diff2html:$diff2htmlVersion") {
        exclude group: "org.webjars.npm", module: "*"
    }

    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation "org.amshove.kluent:kluent:$kluentVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    testImplementation "com.h2database:h2:$h2Version"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

sourceSets {
    test {
        resources {
            srcDir "$buildDir/testkit"
        }
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

jacoco {
    toolVersion = jacocoVersion
}

tasks.withType(KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict", "-Xjvm-default=enable"]
        allWarningsAsErrors = true
        jvmTarget = "1.8"
    }
}

task generateTestkitFiles {
    def jacocoJar = configurations.jacocoAgent.asPath.toString()

    def jacocoAgentJar = new JacocoAgentJar(project.services.get(FileOperations)).tap {
        agentConf = project.files(jacocoJar)
    }

    def javaagent = jacocoAgentJar.getJar()
    def destfile = new File(buildDir, "jacoco/test.exec")

    def jvmArgs = "org.gradle.jvmargs=-javaagent:$javaagent=destfile=$destfile".replace("\\", "\\\\")
    def outputDir = file("$buildDir/testkit")

    inputs.files jacocoJar
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()

        file("$outputDir/testkit-gradle.properties").text = jvmArgs
    }
}

test {
    useJUnitPlatform()

    dependsOn generateTestkitFiles
    finalizedBy jacocoTestReport
}

tasks.named("processTestResources") {
    dependsOn generateTestkitFiles
}

ktlint {
    disabledRules = ["import-ordering"]

    reporters {
        reporter ReporterType.CHECKSTYLE
    }
}

detekt {
    config = files("${rootProject.projectDir}/detekt.yml")
    input = files("$projectDir/src/main/kotlin")
    buildUponDefaultConfig = true

    reports {
        xml.destination = file("$buildDir/reports/detekt/detekt.xml")
        html.destination = file("$buildDir/reports/detekt/detekt.html")
    }
}

dokkaHtml {
    outputDirectory.set(javadoc.destinationDir)

    dokkaSourceSets {
        configureEach {
            jdkVersion.set(8)

            sourceLink {
                localDirectory.set(file("src/main/kotlin"))
                remoteUrl.set(new URL("https://github.com/SmartsquareGmbH/squit/blob/master/src/main/kotlin"))
                remoteLineSuffix.set("#L")
            }

            externalDocumentationLink {
                url.set(new URL("https://dom4j.github.io/javadoc/$dom4jVersion/"))
            }

            externalDocumentationLink {
                url.set(new URL("https://lightbend.github.io/config/latest/api/"))
            }

            externalDocumentationLink {
                url.set(new URL("https://www.javadoc.io/doc/com.google.code.gson/gson/$gsonVersion/com.google.gson/"))
            }
        }
    }
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
    }
}

static def isNonStable(String version) {
    def stableKeyword = ["RELEASE", "FINAL", "GA"].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/

    return !stableKeyword && !(version ==~ regex)
}

tasks.withType(Javadoc).all {
    it.dependsOn dokkaHtml
}

pluginBundle {
    website = "https://github.com/SmartsquareGmbH/squit"
    vcsUrl = "https://github.com/SmartsquareGmbH/squit"
    description = "Gradle plugin for simple testing of JSON/XML/SOAP/etc APIs."
    tags = ["testing", "json", "xml", "soap", "automation"]

    plugins {
        squit {
            id = "de.smartsquare.squit"
            displayName = "Squit"
        }
    }
}

gradlePlugin {
    plugins {
        squit {
            id = "de.smartsquare.squit"
            implementationClass = "de.smartsquare.squit.SquitPlugin"
        }
    }
}

wrapper {
    gradleVersion = project.ext.gradleVersion
}
